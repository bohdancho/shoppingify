import{l as B,n as sr,o as ar,q as cr,t as $,u as C,w as dr,x as fr,y as ur,z as p,A as hr,C as G,E as lr,__tla as wr}from"./index4622334d.js";let I,H,F,K,M,N,yr=Promise.all([(()=>{try{return wr}catch{}})()]).then(async()=>{function L(t,r,n,o){ar(t);const s=cr({dkLen:32,asyncTick:10},o),{c:e,dkLen:i,asyncTick:a}=s;if($(e),$(i),$(a),e<1)throw new Error("PBKDF2: iterations (c) should be >= 1");const c=C(r),u=C(n),f=new Uint8Array(i),d=dr.create(t,c),h=d._cloneInto().update(u);return{c:e,dkLen:i,asyncTick:a,DK:f,PRF:d,PRFSalt:h}}function _(t,r,n,o,s){return t.destroy(),r.destroy(),o&&o.destroy(),s.fill(0),n}function z(t,r,n,o){const{c:s,dkLen:e,DK:i,PRF:a,PRFSalt:c}=L(t,r,n,o);let u;const f=new Uint8Array(4),d=B(f),h=new Uint8Array(a.outputLen);for(let l=1,w=0;w<e;l++,w+=a.outputLen){const y=i.subarray(w,w+a.outputLen);d.setInt32(0,l,!1),(u=c._cloneInto(u)).update(f).digestInto(h),y.set(h.subarray(0,y.length));for(let b=1;b<s;b++){a._cloneInto(u).update(h).digestInto(h);for(let g=0;g<y.length;g++)y[g]^=h[g]}}return _(a,c,i,u,h)}async function W(t,r,n,o){const{c:s,dkLen:e,asyncTick:i,DK:a,PRF:c,PRFSalt:u}=L(t,r,n,o);let f;const d=new Uint8Array(4),h=B(d),l=new Uint8Array(c.outputLen);for(let w=1,y=0;y<e;w++,y+=c.outputLen){const b=a.subarray(y,y+c.outputLen);h.setInt32(0,w,!1),(f=u._cloneInto(f)).update(d).digestInto(l),b.set(l.subarray(0,b.length)),await sr(s-1,i,()=>{c._cloneInto(f).update(l).digestInto(l);for(let g=0;g<b.length;g++)b[g]^=l[g]})}return _(c,u,a,f,l)}const q=(t,r,n)=>t&r^~t&n,O=(t,r,n)=>t&r^t&n^r&n,J=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),E=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),m=new Uint32Array(64);class Q extends ur{constructor(){super(64,32,8,!1),this.A=E[0]|0,this.B=E[1]|0,this.C=E[2]|0,this.D=E[3]|0,this.E=E[4]|0,this.F=E[5]|0,this.G=E[6]|0,this.H=E[7]|0}get(){const{A:r,B:n,C:o,D:s,E:e,F:i,G:a,H:c}=this;return[r,n,o,s,e,i,a,c]}set(r,n,o,s,e,i,a,c){this.A=r|0,this.B=n|0,this.C=o|0,this.D=s|0,this.E=e|0,this.F=i|0,this.G=a|0,this.H=c|0}process(r,n){for(let d=0;d<16;d++,n+=4)m[d]=r.getUint32(n,!1);for(let d=16;d<64;d++){const h=m[d-15],l=m[d-2],w=p(h,7)^p(h,18)^h>>>3,y=p(l,17)^p(l,19)^l>>>10;m[d]=y+m[d-7]+w+m[d-16]|0}let{A:o,B:s,C:e,D:i,E:a,F:c,G:u,H:f}=this;for(let d=0;d<64;d++){const h=p(a,6)^p(a,11)^p(a,25),l=f+h+q(a,c,u)+J[d]+m[d]|0,w=(p(o,2)^p(o,13)^p(o,22))+O(o,s,e)|0;f=u,u=c,c=a,a=i+l|0,i=e,e=s,s=o,o=l+w|0}o=o+this.A|0,s=s+this.B|0,e=e+this.C|0,i=i+this.D|0,a=a+this.E|0,c=c+this.F|0,u=u+this.G|0,f=f+this.H|0,this.set(o,s,e,i,a,c,u,f)}roundClean(){m.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const V=fr(()=>new Q);function A(t){return t instanceof Uint8Array||t!=null&&typeof t=="object"&&t.constructor.name==="Uint8Array"}function X(...t){const r=e=>e,n=(e,i)=>a=>e(i(a)),o=t.map(e=>e.encode).reduceRight(n,r),s=t.map(e=>e.decode).reduce(n,r);return{encode:o,decode:s}}function Y(t){return{encode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return r.map(n=>{if(n<0||n>=t.length)throw new Error(`Digit index outside alphabet: ${n} (alphabet: ${t.length})`);return t[n]})},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("alphabet.decode input should be array of strings");return r.map(n=>{if(typeof n!="string")throw new Error(`alphabet.decode: not string element=${n}`);const o=t.indexOf(n);if(o===-1)throw new Error(`Unknown letter: "${n}". Allowed: ${t}`);return o})}}}function Z(t=""){if(typeof t!="string")throw new Error("join separator should be string");return{encode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("join.encode input should be array of strings");for(let n of r)if(typeof n!="string")throw new Error(`join.encode: non-string input=${n}`);return r.join(t)},decode:r=>{if(typeof r!="string")throw new Error("join.decode input should be string");return r.split(t)}}}function rr(t,r="="){if(typeof r!="string")throw new Error("padding chr should be string");return{encode(n){if(!Array.isArray(n)||n.length&&typeof n[0]!="string")throw new Error("padding.encode input should be array of strings");for(let o of n)if(typeof o!="string")throw new Error(`padding.encode: non-string input=${o}`);for(;n.length*t%8;)n.push(r);return n},decode(n){if(!Array.isArray(n)||n.length&&typeof n[0]!="string")throw new Error("padding.encode input should be array of strings");for(let s of n)if(typeof s!="string")throw new Error(`padding.decode: non-string input=${s}`);let o=n.length;if(o*t%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;o>0&&n[o-1]===r;o--)if(!((o-1)*t%8))throw new Error("Invalid padding: string has too much padding");return n.slice(0,o)}}}function k(t,r,n){if(r<2)throw new Error(`convertRadix: wrong from=${r}, base cannot be less than 2`);if(n<2)throw new Error(`convertRadix: wrong to=${n}, base cannot be less than 2`);if(!Array.isArray(t))throw new Error("convertRadix: data should be array");if(!t.length)return[];let o=0;const s=[],e=Array.from(t);for(e.forEach(i=>{if(i<0||i>=r)throw new Error(`Wrong integer: ${i}`)});;){let i=0,a=!0;for(let c=o;c<e.length;c++){const u=e[c],f=r*i+u;if(!Number.isSafeInteger(f)||r*i/r!==i||f-u!==r*i)throw new Error("convertRadix: carry overflow");i=f%n;const d=Math.floor(f/n);if(e[c]=d,!Number.isSafeInteger(d)||d*n+i!==f)throw new Error("convertRadix: carry overflow");if(a)d?a=!1:o=c;else continue}if(s.push(i),a)break}for(let i=0;i<t.length-1&&t[i]===0;i++)s.push(0);return s.reverse()}const D=(t,r)=>r?D(r,t%r):t,x=(t,r)=>t+(r-D(t,r));function R(t,r,n,o){if(!Array.isArray(t))throw new Error("convertRadix2: data should be array");if(r<=0||r>32)throw new Error(`convertRadix2: wrong from=${r}`);if(n<=0||n>32)throw new Error(`convertRadix2: wrong to=${n}`);if(x(r,n)>32)throw new Error(`convertRadix2: carry overflow from=${r} to=${n} carryBits=${x(r,n)}`);let s=0,e=0;const i=2**n-1,a=[];for(const c of t){if(c>=2**r)throw new Error(`convertRadix2: invalid data word=${c} from=${r}`);if(s=s<<r|c,e+r>32)throw new Error(`convertRadix2: carry overflow pos=${e} from=${r}`);for(e+=r;e>=n;e-=n)a.push((s>>e-n&i)>>>0);s&=2**e-1}if(s=s<<n-e&i,!o&&e>=r)throw new Error("Excess padding");if(!o&&s)throw new Error(`Non-zero padding: ${s}`);return o&&e>0&&a.push(s>>>0),a}function tr(t){return{encode:r=>{if(!A(r))throw new Error("radix.encode input should be Uint8Array");return k(Array.from(r),2**8,t)},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("radix.decode input should be array of numbers");return Uint8Array.from(k(r,t,2**8))}}}function nr(t,r=!1){if(t<=0||t>32)throw new Error("radix2: bits should be in (0..32]");if(x(8,t)>32||x(t,8)>32)throw new Error("radix2: carry overflow");return{encode:n=>{if(!A(n))throw new Error("radix2.encode input should be Uint8Array");return R(Array.from(n),8,t,!r)},decode:n=>{if(!Array.isArray(n)||n.length&&typeof n[0]!="number")throw new Error("radix2.decode input should be array of numbers");return Uint8Array.from(R(n,t,8,r))}}}function or(t,r){if(typeof r!="function")throw new Error("checksum fn should be function");return{encode(n){if(!A(n))throw new Error("checksum.encode: input should be Uint8Array");const o=r(n).slice(0,t),s=new Uint8Array(n.length+t);return s.set(n),s.set(o,n.length),s},decode(n){if(!A(n))throw new Error("checksum.decode: input should be Uint8Array");const o=n.slice(0,-t),s=r(o).slice(0,t),e=n.slice(-t);for(let i=0;i<t;i++)if(s[i]!==e[i])throw new Error("Invalid checksum");return o}}}const v={alphabet:Y,chain:X,checksum:or,convertRadix:k,convertRadix2:R,radix:tr,radix2:nr,join:Z,padding:rr},er=t=>t[0]==="\u3042\u3044\u3053\u304F\u3057\u3093";function T(t){if(typeof t!="string")throw new TypeError(`Invalid mnemonic type: ${typeof t}`);return t.normalize("NFKD")}function U(t){const r=T(t),n=r.split(" ");if(![12,15,18,21,24].includes(n.length))throw new Error("Invalid mnemonic");return{nfkd:r,words:n}}function j(t){lr(t,16,20,24,28,32)}H=function(t,r=128){if($(r),r%32!==0||r>256)throw new TypeError("Invalid entropy");return I(hr(r/8),t)};const ir=t=>{const r=8-t.length/4;return new Uint8Array([V(t)[0]>>r<<r])};function P(t){if(!Array.isArray(t)||t.length!==2048||typeof t[0]!="string")throw new Error("Wordlist: expected array of 2048 strings");return t.forEach(r=>{if(typeof r!="string")throw new Error(`Wordlist: non-string element: ${r}`)}),v.chain(v.checksum(1,ir),v.radix2(11,!0),v.alphabet(t))}F=function(t,r){const{words:n}=U(t),o=P(r).decode(n);return j(o),o},I=function(t,r){return j(t),P(r).encode(t).join(er(r)?"\u3000":" ")},N=function(t,r){try{F(t,r)}catch{return!1}return!0};const S=t=>T(`mnemonic${t}`);K=function(t,r=""){return W(G,U(t).nfkd,S(r),{c:2048,dkLen:64})},M=function(t,r=""){return z(G,U(t).nfkd,S(r),{c:2048,dkLen:64})}});export{yr as __tla,I as entropyToMnemonic,H as generateMnemonic,F as mnemonicToEntropy,K as mnemonicToSeed,M as mnemonicToSeedSync,N as validateMnemonic};
